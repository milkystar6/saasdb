// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: db_func_mysql_backup.proto

package grpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MySQLBackupServiceClient is the client API for MySQLBackupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySQLBackupServiceClient interface {
	NewBackup(ctx context.Context, in *BackupTaskRequest, opts ...grpc.CallOption) (*BackupTaskResponse, error)
}

type mySQLBackupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMySQLBackupServiceClient(cc grpc.ClientConnInterface) MySQLBackupServiceClient {
	return &mySQLBackupServiceClient{cc}
}

func (c *mySQLBackupServiceClient) NewBackup(ctx context.Context, in *BackupTaskRequest, opts ...grpc.CallOption) (*BackupTaskResponse, error) {
	out := new(BackupTaskResponse)
	err := c.cc.Invoke(ctx, "/saasdb.MySQLBackupService/NewBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLBackupServiceServer is the server API for MySQLBackupService service.
// All implementations must embed UnimplementedMySQLBackupServiceServer
// for forward compatibility
type MySQLBackupServiceServer interface {
	NewBackup(context.Context, *BackupTaskRequest) (*BackupTaskResponse, error)
	mustEmbedUnimplementedMySQLBackupServiceServer()
}

// UnimplementedMySQLBackupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMySQLBackupServiceServer struct {
}

func (UnimplementedMySQLBackupServiceServer) NewBackup(context.Context, *BackupTaskRequest) (*BackupTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBackup not implemented")
}
func (UnimplementedMySQLBackupServiceServer) mustEmbedUnimplementedMySQLBackupServiceServer() {}

// UnsafeMySQLBackupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySQLBackupServiceServer will
// result in compilation errors.
type UnsafeMySQLBackupServiceServer interface {
	mustEmbedUnimplementedMySQLBackupServiceServer()
}

func RegisterMySQLBackupServiceServer(s grpc.ServiceRegistrar, srv MySQLBackupServiceServer) {
	s.RegisterService(&MySQLBackupService_ServiceDesc, srv)
}

func _MySQLBackupService_NewBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLBackupServiceServer).NewBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saasdb.MySQLBackupService/NewBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLBackupServiceServer).NewBackup(ctx, req.(*BackupTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MySQLBackupService_ServiceDesc is the grpc.ServiceDesc for MySQLBackupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySQLBackupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saasdb.MySQLBackupService",
	HandlerType: (*MySQLBackupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBackup",
			Handler:    _MySQLBackupService_NewBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_func_mysql_backup.proto",
}
