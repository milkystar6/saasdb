// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: db_func_show_processlist.proto

package grpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MySQLShowProcessListServiceClient is the client API for MySQLShowProcessListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySQLShowProcessListServiceClient interface {
	NewShowProcesslist(ctx context.Context, in *ShowProcesslistRequest, opts ...grpc.CallOption) (*ShowProcesslistResponce, error)
}

type mySQLShowProcessListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMySQLShowProcessListServiceClient(cc grpc.ClientConnInterface) MySQLShowProcessListServiceClient {
	return &mySQLShowProcessListServiceClient{cc}
}

func (c *mySQLShowProcessListServiceClient) NewShowProcesslist(ctx context.Context, in *ShowProcesslistRequest, opts ...grpc.CallOption) (*ShowProcesslistResponce, error) {
	out := new(ShowProcesslistResponce)
	err := c.cc.Invoke(ctx, "/saasdb.MySQLShowProcessListService/NewShowProcesslist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLShowProcessListServiceServer is the server API for MySQLShowProcessListService service.
// All implementations must embed UnimplementedMySQLShowProcessListServiceServer
// for forward compatibility
type MySQLShowProcessListServiceServer interface {
	NewShowProcesslist(context.Context, *ShowProcesslistRequest) (*ShowProcesslistResponce, error)
	mustEmbedUnimplementedMySQLShowProcessListServiceServer()
}

// UnimplementedMySQLShowProcessListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMySQLShowProcessListServiceServer struct {
}

func (UnimplementedMySQLShowProcessListServiceServer) NewShowProcesslist(context.Context, *ShowProcesslistRequest) (*ShowProcesslistResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewShowProcesslist not implemented")
}
func (UnimplementedMySQLShowProcessListServiceServer) mustEmbedUnimplementedMySQLShowProcessListServiceServer() {
}

// UnsafeMySQLShowProcessListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySQLShowProcessListServiceServer will
// result in compilation errors.
type UnsafeMySQLShowProcessListServiceServer interface {
	mustEmbedUnimplementedMySQLShowProcessListServiceServer()
}

func RegisterMySQLShowProcessListServiceServer(s grpc.ServiceRegistrar, srv MySQLShowProcessListServiceServer) {
	s.RegisterService(&MySQLShowProcessListService_ServiceDesc, srv)
}

func _MySQLShowProcessListService_NewShowProcesslist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowProcesslistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLShowProcessListServiceServer).NewShowProcesslist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saasdb.MySQLShowProcessListService/NewShowProcesslist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLShowProcessListServiceServer).NewShowProcesslist(ctx, req.(*ShowProcesslistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MySQLShowProcessListService_ServiceDesc is the grpc.ServiceDesc for MySQLShowProcessListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySQLShowProcessListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saasdb.MySQLShowProcessListService",
	HandlerType: (*MySQLShowProcessListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewShowProcesslist",
			Handler:    _MySQLShowProcessListService_NewShowProcesslist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_func_show_processlist.proto",
}

// MySQLStopProcessServiceClient is the client API for MySQLStopProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySQLStopProcessServiceClient interface {
	NewStopProcess(ctx context.Context, in *StopProcessRequset, opts ...grpc.CallOption) (*StopProcessResponse, error)
}

type mySQLStopProcessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMySQLStopProcessServiceClient(cc grpc.ClientConnInterface) MySQLStopProcessServiceClient {
	return &mySQLStopProcessServiceClient{cc}
}

func (c *mySQLStopProcessServiceClient) NewStopProcess(ctx context.Context, in *StopProcessRequset, opts ...grpc.CallOption) (*StopProcessResponse, error) {
	out := new(StopProcessResponse)
	err := c.cc.Invoke(ctx, "/saasdb.MySQLStopProcessService/NewStopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySQLStopProcessServiceServer is the server API for MySQLStopProcessService service.
// All implementations must embed UnimplementedMySQLStopProcessServiceServer
// for forward compatibility
type MySQLStopProcessServiceServer interface {
	NewStopProcess(context.Context, *StopProcessRequset) (*StopProcessResponse, error)
	mustEmbedUnimplementedMySQLStopProcessServiceServer()
}

// UnimplementedMySQLStopProcessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMySQLStopProcessServiceServer struct {
}

func (UnimplementedMySQLStopProcessServiceServer) NewStopProcess(context.Context, *StopProcessRequset) (*StopProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewStopProcess not implemented")
}
func (UnimplementedMySQLStopProcessServiceServer) mustEmbedUnimplementedMySQLStopProcessServiceServer() {
}

// UnsafeMySQLStopProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySQLStopProcessServiceServer will
// result in compilation errors.
type UnsafeMySQLStopProcessServiceServer interface {
	mustEmbedUnimplementedMySQLStopProcessServiceServer()
}

func RegisterMySQLStopProcessServiceServer(s grpc.ServiceRegistrar, srv MySQLStopProcessServiceServer) {
	s.RegisterService(&MySQLStopProcessService_ServiceDesc, srv)
}

func _MySQLStopProcessService_NewStopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProcessRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySQLStopProcessServiceServer).NewStopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saasdb.MySQLStopProcessService/NewStopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySQLStopProcessServiceServer).NewStopProcess(ctx, req.(*StopProcessRequset))
	}
	return interceptor(ctx, in, info, handler)
}

// MySQLStopProcessService_ServiceDesc is the grpc.ServiceDesc for MySQLStopProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySQLStopProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saasdb.MySQLStopProcessService",
	HandlerType: (*MySQLStopProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewStopProcess",
			Handler:    _MySQLStopProcessService_NewStopProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_func_show_processlist.proto",
}
