// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: orchestrator_webhook.proto

package grpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpDeadMasterServiceClient is the client API for OpDeadMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpDeadMasterServiceClient interface {
	NewOpDeadMaster(ctx context.Context, in *OrchWebHookDeadMasterRequest, opts ...grpc.CallOption) (*OrchWebHookDeadMasterResponse, error)
}

type opDeadMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpDeadMasterServiceClient(cc grpc.ClientConnInterface) OpDeadMasterServiceClient {
	return &opDeadMasterServiceClient{cc}
}

func (c *opDeadMasterServiceClient) NewOpDeadMaster(ctx context.Context, in *OrchWebHookDeadMasterRequest, opts ...grpc.CallOption) (*OrchWebHookDeadMasterResponse, error) {
	out := new(OrchWebHookDeadMasterResponse)
	err := c.cc.Invoke(ctx, "/saasdb.OpDeadMasterService/NewOpDeadMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpDeadMasterServiceServer is the server API for OpDeadMasterService service.
// All implementations must embed UnimplementedOpDeadMasterServiceServer
// for forward compatibility
type OpDeadMasterServiceServer interface {
	NewOpDeadMaster(context.Context, *OrchWebHookDeadMasterRequest) (*OrchWebHookDeadMasterResponse, error)
	mustEmbedUnimplementedOpDeadMasterServiceServer()
}

// UnimplementedOpDeadMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpDeadMasterServiceServer struct {
}

func (UnimplementedOpDeadMasterServiceServer) NewOpDeadMaster(context.Context, *OrchWebHookDeadMasterRequest) (*OrchWebHookDeadMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOpDeadMaster not implemented")
}
func (UnimplementedOpDeadMasterServiceServer) mustEmbedUnimplementedOpDeadMasterServiceServer() {}

// UnsafeOpDeadMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpDeadMasterServiceServer will
// result in compilation errors.
type UnsafeOpDeadMasterServiceServer interface {
	mustEmbedUnimplementedOpDeadMasterServiceServer()
}

func RegisterOpDeadMasterServiceServer(s grpc.ServiceRegistrar, srv OpDeadMasterServiceServer) {
	s.RegisterService(&OpDeadMasterService_ServiceDesc, srv)
}

func _OpDeadMasterService_NewOpDeadMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchWebHookDeadMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpDeadMasterServiceServer).NewOpDeadMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saasdb.OpDeadMasterService/NewOpDeadMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpDeadMasterServiceServer).NewOpDeadMaster(ctx, req.(*OrchWebHookDeadMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpDeadMasterService_ServiceDesc is the grpc.ServiceDesc for OpDeadMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpDeadMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saasdb.OpDeadMasterService",
	HandlerType: (*OpDeadMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOpDeadMaster",
			Handler:    _OpDeadMasterService_NewOpDeadMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator_webhook.proto",
}

// OpNewMasterServiceClient is the client API for OpNewMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpNewMasterServiceClient interface {
	NewOpNewMaster(ctx context.Context, in *OrchWebHookNewMasterRequest, opts ...grpc.CallOption) (*OrchWebHookNewMasterResponse, error)
}

type opNewMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpNewMasterServiceClient(cc grpc.ClientConnInterface) OpNewMasterServiceClient {
	return &opNewMasterServiceClient{cc}
}

func (c *opNewMasterServiceClient) NewOpNewMaster(ctx context.Context, in *OrchWebHookNewMasterRequest, opts ...grpc.CallOption) (*OrchWebHookNewMasterResponse, error) {
	out := new(OrchWebHookNewMasterResponse)
	err := c.cc.Invoke(ctx, "/saasdb.OpNewMasterService/NewOpNewMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpNewMasterServiceServer is the server API for OpNewMasterService service.
// All implementations must embed UnimplementedOpNewMasterServiceServer
// for forward compatibility
type OpNewMasterServiceServer interface {
	NewOpNewMaster(context.Context, *OrchWebHookNewMasterRequest) (*OrchWebHookNewMasterResponse, error)
	mustEmbedUnimplementedOpNewMasterServiceServer()
}

// UnimplementedOpNewMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpNewMasterServiceServer struct {
}

func (UnimplementedOpNewMasterServiceServer) NewOpNewMaster(context.Context, *OrchWebHookNewMasterRequest) (*OrchWebHookNewMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOpNewMaster not implemented")
}
func (UnimplementedOpNewMasterServiceServer) mustEmbedUnimplementedOpNewMasterServiceServer() {}

// UnsafeOpNewMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpNewMasterServiceServer will
// result in compilation errors.
type UnsafeOpNewMasterServiceServer interface {
	mustEmbedUnimplementedOpNewMasterServiceServer()
}

func RegisterOpNewMasterServiceServer(s grpc.ServiceRegistrar, srv OpNewMasterServiceServer) {
	s.RegisterService(&OpNewMasterService_ServiceDesc, srv)
}

func _OpNewMasterService_NewOpNewMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchWebHookNewMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpNewMasterServiceServer).NewOpNewMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saasdb.OpNewMasterService/NewOpNewMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpNewMasterServiceServer).NewOpNewMaster(ctx, req.(*OrchWebHookNewMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpNewMasterService_ServiceDesc is the grpc.ServiceDesc for OpNewMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpNewMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saasdb.OpNewMasterService",
	HandlerType: (*OpNewMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOpNewMaster",
			Handler:    _OpNewMasterService_NewOpNewMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator_webhook.proto",
}
