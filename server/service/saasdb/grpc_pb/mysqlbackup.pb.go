// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: mysqlbackup.proto

package grpc_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BackUpType_Types int32

const (
	// 物理备份全备
	BackUpType_FullBackUpWithXtra BackUpType_Types = 0
	// 物理备份增备 -- 留个标志 一般不用
	BackUpType_IncrBackUpWithXtra BackUpType_Types = 1
	// 逻辑备份 需要先落地再上传 这种选择节点的时候 看是否找几台中间机器
	// 逻辑备份使用mydmper 全备
	BackUpType_FullBackUpWithMydumper BackUpType_Types = 2
	// 逻辑备份使用mudmper 单表
	BackUpType_SingleTableBackUpWithMydumper BackUpType_Types = 3
	// 有些操作系统环境太次了，不支持安装mydumper 使用mysqldump
	BackUpType_FullBackUpWithMySQLDump        BackUpType_Types = 4
	BackUpType_SingleTableBackUpWithMySQLDump BackUpType_Types = 5
)

// Enum value maps for BackUpType_Types.
var (
	BackUpType_Types_name = map[int32]string{
		0: "FullBackUpWithXtra",
		1: "IncrBackUpWithXtra",
		2: "FullBackUpWithMydumper",
		3: "SingleTableBackUpWithMydumper",
		4: "FullBackUpWithMySQLDump",
		5: "SingleTableBackUpWithMySQLDump",
	}
	BackUpType_Types_value = map[string]int32{
		"FullBackUpWithXtra":             0,
		"IncrBackUpWithXtra":             1,
		"FullBackUpWithMydumper":         2,
		"SingleTableBackUpWithMydumper":  3,
		"FullBackUpWithMySQLDump":        4,
		"SingleTableBackUpWithMySQLDump": 5,
	}
)

func (x BackUpType_Types) Enum() *BackUpType_Types {
	p := new(BackUpType_Types)
	*p = x
	return p
}

func (x BackUpType_Types) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackUpType_Types) Descriptor() protoreflect.EnumDescriptor {
	return file_mysqlbackup_proto_enumTypes[0].Descriptor()
}

func (BackUpType_Types) Type() protoreflect.EnumType {
	return &file_mysqlbackup_proto_enumTypes[0]
}

func (x BackUpType_Types) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackUpType_Types.Descriptor instead.
func (BackUpType_Types) EnumDescriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{5, 0}
}

//      定义备份所需要的消息
type BackupTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkVm          *WorkVm          `protobuf:"bytes,1,opt,name=WorkVm,proto3" json:"WorkVm,omitempty"`
	MySQLConn       *MySQLConn       `protobuf:"bytes,2,opt,name=MySQLConn,proto3" json:"MySQLConn,omitempty"`
	SaasDBMySQLConn *SaasDBMySQLConn `protobuf:"bytes,3,opt,name=SaasDBMySQLConn,proto3" json:"SaasDBMySQLConn,omitempty"`
	BackUpType      *BackUpType      `protobuf:"bytes,4,opt,name=BackUpType,proto3" json:"BackUpType,omitempty"`
	RemoteStorageS3 *RemoteStorageS3 `protobuf:"bytes,5,opt,name=RemoteStorageS3,proto3" json:"RemoteStorageS3,omitempty"`
	BackUpTimeout   uint32           `protobuf:"varint,6,opt,name=BackUpTimeout,proto3" json:"BackUpTimeout,omitempty"`
	DomainId        uint32           `protobuf:"varint,7,opt,name=DomainId,proto3" json:"DomainId,omitempty"`
}

func (x *BackupTaskRequest) Reset() {
	*x = BackupTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlbackup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupTaskRequest) ProtoMessage() {}

func (x *BackupTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlbackup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupTaskRequest.ProtoReflect.Descriptor instead.
func (*BackupTaskRequest) Descriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{0}
}

func (x *BackupTaskRequest) GetWorkVm() *WorkVm {
	if x != nil {
		return x.WorkVm
	}
	return nil
}

func (x *BackupTaskRequest) GetMySQLConn() *MySQLConn {
	if x != nil {
		return x.MySQLConn
	}
	return nil
}

func (x *BackupTaskRequest) GetSaasDBMySQLConn() *SaasDBMySQLConn {
	if x != nil {
		return x.SaasDBMySQLConn
	}
	return nil
}

func (x *BackupTaskRequest) GetBackUpType() *BackUpType {
	if x != nil {
		return x.BackUpType
	}
	return nil
}

func (x *BackupTaskRequest) GetRemoteStorageS3() *RemoteStorageS3 {
	if x != nil {
		return x.RemoteStorageS3
	}
	return nil
}

func (x *BackupTaskRequest) GetBackUpTimeout() uint32 {
	if x != nil {
		return x.BackUpTimeout
	}
	return 0
}

func (x *BackupTaskRequest) GetDomainId() uint32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type BackupTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageInfo string `protobuf:"bytes,1,opt,name=MessageInfo,proto3" json:"MessageInfo,omitempty"`
	MessageWarn string `protobuf:"bytes,2,opt,name=MessageWarn,proto3" json:"MessageWarn,omitempty"`
}

func (x *BackupTaskResponse) Reset() {
	*x = BackupTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlbackup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupTaskResponse) ProtoMessage() {}

func (x *BackupTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlbackup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupTaskResponse.ProtoReflect.Descriptor instead.
func (*BackupTaskResponse) Descriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{1}
}

func (x *BackupTaskResponse) GetMessageInfo() string {
	if x != nil {
		return x.MessageInfo
	}
	return ""
}

func (x *BackupTaskResponse) GetMessageWarn() string {
	if x != nil {
		return x.MessageWarn
	}
	return ""
}

type WorkVm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 备份工作节点 ip ip地址 即选择哪个节点进行备份任务，一般用不到，或者可能往我们的备份记录表里去写点数据
	WorkVm string `protobuf:"bytes,1,opt,name=WorkVm,proto3" json:"WorkVm,omitempty"`
}

func (x *WorkVm) Reset() {
	*x = WorkVm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlbackup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkVm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkVm) ProtoMessage() {}

func (x *WorkVm) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlbackup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkVm.ProtoReflect.Descriptor instead.
func (*WorkVm) Descriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{2}
}

func (x *WorkVm) GetWorkVm() string {
	if x != nil {
		return x.WorkVm
	}
	return ""
}

type MySQLConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MySQLUser       string `protobuf:"bytes,1,opt,name=MySQLUser,proto3" json:"MySQLUser,omitempty"`
	MySQLUserpasswd string `protobuf:"bytes,2,opt,name=MySQLUserpasswd,proto3" json:"MySQLUserpasswd,omitempty"`
	MySQLHost       string `protobuf:"bytes,3,opt,name=MySQLHost,proto3" json:"MySQLHost,omitempty"`
	MySQLPort       uint32 `protobuf:"varint,4,opt,name=MySQLPort,proto3" json:"MySQLPort,omitempty"`
}

func (x *MySQLConn) Reset() {
	*x = MySQLConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlbackup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQLConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLConn) ProtoMessage() {}

func (x *MySQLConn) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlbackup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLConn.ProtoReflect.Descriptor instead.
func (*MySQLConn) Descriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{3}
}

func (x *MySQLConn) GetMySQLUser() string {
	if x != nil {
		return x.MySQLUser
	}
	return ""
}

func (x *MySQLConn) GetMySQLUserpasswd() string {
	if x != nil {
		return x.MySQLUserpasswd
	}
	return ""
}

func (x *MySQLConn) GetMySQLHost() string {
	if x != nil {
		return x.MySQLHost
	}
	return ""
}

func (x *MySQLConn) GetMySQLPort() uint32 {
	if x != nil {
		return x.MySQLPort
	}
	return 0
}

type SaasDBMySQLConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MySQLUser       string `protobuf:"bytes,1,opt,name=MySQLUser,proto3" json:"MySQLUser,omitempty"`
	MySQLUserpasswd string `protobuf:"bytes,2,opt,name=MySQLUserpasswd,proto3" json:"MySQLUserpasswd,omitempty"`
	MySQLHost       string `protobuf:"bytes,3,opt,name=MySQLHost,proto3" json:"MySQLHost,omitempty"`
	MySQLPort       uint32 `protobuf:"varint,4,opt,name=MySQLPort,proto3" json:"MySQLPort,omitempty"`
	SaaSDBName      string `protobuf:"bytes,5,opt,name=SaaSDBName,proto3" json:"SaaSDBName,omitempty"`
}

func (x *SaasDBMySQLConn) Reset() {
	*x = SaasDBMySQLConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlbackup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaasDBMySQLConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaasDBMySQLConn) ProtoMessage() {}

func (x *SaasDBMySQLConn) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlbackup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaasDBMySQLConn.ProtoReflect.Descriptor instead.
func (*SaasDBMySQLConn) Descriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{4}
}

func (x *SaasDBMySQLConn) GetMySQLUser() string {
	if x != nil {
		return x.MySQLUser
	}
	return ""
}

func (x *SaasDBMySQLConn) GetMySQLUserpasswd() string {
	if x != nil {
		return x.MySQLUserpasswd
	}
	return ""
}

func (x *SaasDBMySQLConn) GetMySQLHost() string {
	if x != nil {
		return x.MySQLHost
	}
	return ""
}

func (x *SaasDBMySQLConn) GetMySQLPort() uint32 {
	if x != nil {
		return x.MySQLPort
	}
	return 0
}

func (x *SaasDBMySQLConn) GetSaaSDBName() string {
	if x != nil {
		return x.SaaSDBName
	}
	return ""
}

type BackUpType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type BackUpType_Types `protobuf:"varint,1,opt,name=Type,proto3,enum=saasdb.BackUpType_Types" json:"Type,omitempty"`
}

func (x *BackUpType) Reset() {
	*x = BackUpType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlbackup_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackUpType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackUpType) ProtoMessage() {}

func (x *BackUpType) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlbackup_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackUpType.ProtoReflect.Descriptor instead.
func (*BackUpType) Descriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{5}
}

func (x *BackUpType) GetType() BackUpType_Types {
	if x != nil {
		return x.Type
	}
	return BackUpType_FullBackUpWithXtra
}

type RemoteStorageS3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 远端存储仓库地址
	S3AccessKEY string `protobuf:"bytes,1,opt,name=S3AccessKEY,proto3" json:"S3AccessKEY,omitempty"`
	S3SecretKey string `protobuf:"bytes,2,opt,name=S3SecretKey,proto3" json:"S3SecretKey,omitempty"`
}

func (x *RemoteStorageS3) Reset() {
	*x = RemoteStorageS3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mysqlbackup_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStorageS3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStorageS3) ProtoMessage() {}

func (x *RemoteStorageS3) ProtoReflect() protoreflect.Message {
	mi := &file_mysqlbackup_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStorageS3.ProtoReflect.Descriptor instead.
func (*RemoteStorageS3) Descriptor() ([]byte, []int) {
	return file_mysqlbackup_proto_rawDescGZIP(), []int{6}
}

func (x *RemoteStorageS3) GetS3AccessKEY() string {
	if x != nil {
		return x.S3AccessKEY
	}
	return ""
}

func (x *RemoteStorageS3) GetS3SecretKey() string {
	if x != nil {
		return x.S3SecretKey
	}
	return ""
}

var File_mysqlbackup_proto protoreflect.FileDescriptor

var file_mysqlbackup_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x61, 0x61, 0x73, 0x64, 0x62, 0x22, 0xe8, 0x02, 0x0a, 0x11,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x56, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x64, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x56,
	0x6d, 0x52, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x56, 0x6d, 0x12, 0x2f, 0x0a, 0x09, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x64, 0x62, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x61,
	0x61, 0x73, 0x44, 0x42, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x61, 0x61,
	0x73, 0x44, 0x42, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x0f, 0x53, 0x61,
	0x61, 0x73, 0x44, 0x42, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x32, 0x0a,
	0x0a, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x64, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x55,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x33, 0x52, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x33, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x42, 0x61, 0x63,
	0x6b, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x22, 0x20, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x56, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x6f,
	0x72, 0x6b, 0x56, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x6f, 0x72, 0x6b,
	0x56, 0x6d, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x73, 0x65, 0x72, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x73,
	0x65, 0x72, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x50, 0x6f, 0x72, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x53, 0x61, 0x61, 0x73, 0x44, 0x42, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55,
	0x73, 0x65, 0x72, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x55, 0x73, 0x65, 0x72, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x61, 0x61, 0x53, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x61, 0x61, 0x53, 0x44, 0x42, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a,
	0x0a, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x64, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x05, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x55,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x58, 0x74, 0x72, 0x61, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x6e, 0x63, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x58, 0x74, 0x72,
	0x61, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x55,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x79, 0x64, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x79, 0x64, 0x75, 0x6d, 0x70, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x44, 0x75, 0x6d, 0x70, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x44, 0x75, 0x6d,
	0x70, 0x10, 0x05, 0x22, 0x55, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x33, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x45, 0x59, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x33, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x45, 0x59, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x33, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x32, 0x5a, 0x0a, 0x12, 0x4d, 0x79,
	0x53, 0x51, 0x4c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x19, 0x2e,
	0x73, 0x61, 0x61, 0x73, 0x64, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x64,
	0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x70, 0x62, 0x2f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mysqlbackup_proto_rawDescOnce sync.Once
	file_mysqlbackup_proto_rawDescData = file_mysqlbackup_proto_rawDesc
)

func file_mysqlbackup_proto_rawDescGZIP() []byte {
	file_mysqlbackup_proto_rawDescOnce.Do(func() {
		file_mysqlbackup_proto_rawDescData = protoimpl.X.CompressGZIP(file_mysqlbackup_proto_rawDescData)
	})
	return file_mysqlbackup_proto_rawDescData
}

var file_mysqlbackup_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mysqlbackup_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_mysqlbackup_proto_goTypes = []interface{}{
	(BackUpType_Types)(0),      // 0: saasdb.BackUpType.Types
	(*BackupTaskRequest)(nil),  // 1: saasdb.BackupTaskRequest
	(*BackupTaskResponse)(nil), // 2: saasdb.BackupTaskResponse
	(*WorkVm)(nil),             // 3: saasdb.WorkVm
	(*MySQLConn)(nil),          // 4: saasdb.MySQLConn
	(*SaasDBMySQLConn)(nil),    // 5: saasdb.SaasDBMySQLConn
	(*BackUpType)(nil),         // 6: saasdb.BackUpType
	(*RemoteStorageS3)(nil),    // 7: saasdb.RemoteStorageS3
}
var file_mysqlbackup_proto_depIdxs = []int32{
	3, // 0: saasdb.BackupTaskRequest.WorkVm:type_name -> saasdb.WorkVm
	4, // 1: saasdb.BackupTaskRequest.MySQLConn:type_name -> saasdb.MySQLConn
	5, // 2: saasdb.BackupTaskRequest.SaasDBMySQLConn:type_name -> saasdb.SaasDBMySQLConn
	6, // 3: saasdb.BackupTaskRequest.BackUpType:type_name -> saasdb.BackUpType
	7, // 4: saasdb.BackupTaskRequest.RemoteStorageS3:type_name -> saasdb.RemoteStorageS3
	0, // 5: saasdb.BackUpType.Type:type_name -> saasdb.BackUpType.Types
	1, // 6: saasdb.MySQLBackupService.NewBackup:input_type -> saasdb.BackupTaskRequest
	2, // 7: saasdb.MySQLBackupService.NewBackup:output_type -> saasdb.BackupTaskResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_mysqlbackup_proto_init() }
func file_mysqlbackup_proto_init() {
	if File_mysqlbackup_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mysqlbackup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlbackup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlbackup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkVm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlbackup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySQLConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlbackup_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaasDBMySQLConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlbackup_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackUpType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mysqlbackup_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStorageS3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mysqlbackup_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mysqlbackup_proto_goTypes,
		DependencyIndexes: file_mysqlbackup_proto_depIdxs,
		EnumInfos:         file_mysqlbackup_proto_enumTypes,
		MessageInfos:      file_mysqlbackup_proto_msgTypes,
	}.Build()
	File_mysqlbackup_proto = out.File
	file_mysqlbackup_proto_rawDesc = nil
	file_mysqlbackup_proto_goTypes = nil
	file_mysqlbackup_proto_depIdxs = nil
}
