// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: db_func_create_databases.proto

package grpc_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreateSingleMySQLServiceClient is the client API for CreateSingleMySQLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateSingleMySQLServiceClient interface {
	NewCreateSingleMySQLInstance(ctx context.Context, in *CreateSingleMySQLInstanceReq, opts ...grpc.CallOption) (*CreateSingleMySQLInstanceRes, error)
}

type createSingleMySQLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateSingleMySQLServiceClient(cc grpc.ClientConnInterface) CreateSingleMySQLServiceClient {
	return &createSingleMySQLServiceClient{cc}
}

func (c *createSingleMySQLServiceClient) NewCreateSingleMySQLInstance(ctx context.Context, in *CreateSingleMySQLInstanceReq, opts ...grpc.CallOption) (*CreateSingleMySQLInstanceRes, error) {
	out := new(CreateSingleMySQLInstanceRes)
	err := c.cc.Invoke(ctx, "/saasdb.CreateSingleMySQLService/NewCreateSingleMySQLInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateSingleMySQLServiceServer is the server API for CreateSingleMySQLService service.
// All implementations must embed UnimplementedCreateSingleMySQLServiceServer
// for forward compatibility
type CreateSingleMySQLServiceServer interface {
	NewCreateSingleMySQLInstance(context.Context, *CreateSingleMySQLInstanceReq) (*CreateSingleMySQLInstanceRes, error)
	mustEmbedUnimplementedCreateSingleMySQLServiceServer()
}

// UnimplementedCreateSingleMySQLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCreateSingleMySQLServiceServer struct {
}

func (UnimplementedCreateSingleMySQLServiceServer) NewCreateSingleMySQLInstance(context.Context, *CreateSingleMySQLInstanceReq) (*CreateSingleMySQLInstanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCreateSingleMySQLInstance not implemented")
}
func (UnimplementedCreateSingleMySQLServiceServer) mustEmbedUnimplementedCreateSingleMySQLServiceServer() {
}

// UnsafeCreateSingleMySQLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateSingleMySQLServiceServer will
// result in compilation errors.
type UnsafeCreateSingleMySQLServiceServer interface {
	mustEmbedUnimplementedCreateSingleMySQLServiceServer()
}

func RegisterCreateSingleMySQLServiceServer(s grpc.ServiceRegistrar, srv CreateSingleMySQLServiceServer) {
	s.RegisterService(&CreateSingleMySQLService_ServiceDesc, srv)
}

func _CreateSingleMySQLService_NewCreateSingleMySQLInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSingleMySQLInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateSingleMySQLServiceServer).NewCreateSingleMySQLInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saasdb.CreateSingleMySQLService/NewCreateSingleMySQLInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateSingleMySQLServiceServer).NewCreateSingleMySQLInstance(ctx, req.(*CreateSingleMySQLInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateSingleMySQLService_ServiceDesc is the grpc.ServiceDesc for CreateSingleMySQLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateSingleMySQLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saasdb.CreateSingleMySQLService",
	HandlerType: (*CreateSingleMySQLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCreateSingleMySQLInstance",
			Handler:    _CreateSingleMySQLService_NewCreateSingleMySQLInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_func_create_databases.proto",
}
